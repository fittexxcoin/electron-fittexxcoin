#!/usr/bin/env python3

import glob
import io
import itertools
import os
from os.path import isdir, join
from pathlib import Path
import requests
import shlex
import shutil
from subprocess import check_call
import sys
import zipfile

assert len(sys.argv) < 3

def run(cmd):
    check_call(shlex.split(cmd))

original_dir = os.getcwd()
os.chdir(os.path.dirname(os.path.realpath(__file__)))
os.chdir('..')

code_directories = [
    'android/app/src/main/python',
    'electroncash_gui',
    'ios/ElectronCash/electroncash_gui',  # ios/ElectronCash could contain duplicate files
                                          # copied by make_ios_project.sh.
    'electroncash',
    'electroncash_plugins',
]
file_types = ('*.py', '*.kv')

files = zip(
    itertools.count(start=1),
    itertools.chain.from_iterable(
        glob.iglob(f'{code_directory}/**/{file_type}', recursive=True)
            for code_directory in code_directories
                for file_type in file_types
    )
)

with open("app.fil", "w") as f:
    for n, file in files:
        f.write(f"{Path(file)}\n")
    else:
        print("Found {} files to translate".format(n))

# Generate fresh translation template
if not os.path.exists('electroncash/locale'):
    os.mkdir('electroncash/locale')
cmd = 'xgettext -s --from-code UTF-8 --language Python --no-wrap -f app.fil --keyword=pgettext:1c,2 --keyword=npgettext:1c,2,3 -c --output=electroncash/locale/messages.pot'
print('Generate template')
run(cmd)

os.chdir('electroncash')

crowdin_identifier = 'electron-lambda'
crowdin_file_name = 'files[electron-lambda-client/messages.pot]'
locale_file_name = 'locale/messages.pot'
crowdin_api_key = None

filename = os.path.expanduser('~/.crowdin_api_key')
if os.path.exists(filename):
    with open(filename) as f:
        crowdin_api_key = f.read().strip()

if "crowdin_api_key" in os.environ:
    crowdin_api_key = os.environ["crowdin_api_key"]

if crowdin_api_key:
    # Push to Crowdin
    print('Push to Crowdin')
    url = ('https://api.crowdin.com/api/project/' + crowdin_identifier + '/update-file?key=' + crowdin_api_key)
    with open(locale_file_name, 'rb') as f:
        files = {crowdin_file_name: f}
        response = requests.request('POST', url, files=files)
    print("", "update-file:", "-"*20, response.text, "-"*20, sep="\n")
    # Build translations
    print('Build translations')
    response = requests.request('GET', 'https://api.crowdin.com/api/project/' + crowdin_identifier + '/export?key=' + crowdin_api_key)
    print("", "export:", "-" * 20, response.text, "-" * 20, sep="\n")

use_electrum_locale = True
if len(sys.argv) > 1:
    use_electrum_locale = False
    # Download & unzip
    if sys.argv[1] == "--crowdin":
        s = requests.request('GET', 'https://crowdin.com/backend/download/project/' + crowdin_identifier + '.zip').content
        zfobj = zipfile.ZipFile(io.BytesIO(s))
    else:
        zfobj = zipfile.ZipFile(os.path.join(os.path.relpath(original_dir, os.getcwd()), sys.argv[1]))

    print('Unzip translations')
    for name in zfobj.namelist():
        if name.endswith('/'):
            if not os.path.exists(name):
                os.mkdir(name)
        else:
            with open(name, 'wb') as output:
                output.write(zfobj.read(name))

# Convert .po to .mo
print('Installing')
os.chdir('..')
dst_dir= 'electroncash/locale'
src_dir = 'contrib/electrum-locale/locale' if use_electrum_locale else dst_dir
for lang in os.listdir(src_dir):
    if not isdir(join(src_dir, lang)) or lang == "__pycache__":
        continue
    msg_src_dir = src_dir + '/{}'.format(lang)
    if not use_electrum_locale:
        msg_src_dir += '/LC_MESSAGES'
    msg_dst_dir = dst_dir + '/{}/LC_MESSAGES'.format(lang)
    if not os.path.exists(msg_dst_dir):
        os.makedirs(msg_dst_dir)
    src_file = msg_src_dir + '/electron-lambda.po'
    dst_file = msg_dst_dir + '/electron-lambda.mo'
    cmd = 'msgfmt --output-file="{0}" "{1}"'.format(dst_file, src_file)
    if use_electrum_locale:
        shutil.copy(src_file, msg_dst_dir)
    print('Installing', lang)
    run(cmd)
