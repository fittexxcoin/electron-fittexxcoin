#!/bin/bash

set -e

# Get the current directory of the script
here=$(dirname $(realpath "$0" 2>/dev/null || grealpath "$0"))
. "$here"/base.sh || { echo "Could not source contrib/base.sh"; exit 1; }

pkgname="zbar"
info "Building $pkgname..."

# Ensure dos2unix is run
dos2unix /mnt/c/Users/DELL/electron-lambda/contrib/build-wine/../make_zbar

# Set up PKG_CONFIG_PATH for cross-compilation
export PKG_CONFIG_PATH=/usr/x86_64-w64-mingw32/lib/pkgconfig

# Enter the Zbar source directory
pushd "$here"/$pkgname || fail "Could not chdir to $here/$pkgname"

# Wine-specific build configuration
if [ "$BUILD_TYPE" = "wine" ]; then
    echo "libzbar_la_LDFLAGS += -Wc,-static" >> zbar/Makefile.am
    echo "LDFLAGS += -Wc,-static" >> Makefile.am
fi

# Run autoreconf if necessary
if ! [ -x configure ]; then
    autoreconf -vfi || fail "Could not run autoreconf for $pkgname. Please make sure you have automake and libtool installed, and try again."
fi

# Cross-compile with the i686-w64-mingw32-gcc compiler
if ! [ -r config.status ]; then
    ./configure \
        --prefix="$here/$pkgname/dist" \
        --with-x=no \
        --disable-pthread \
        --disable-doc \
        --disable-video \
        --without-jpeg \
        --without-python \
        --without-gtk \
        --without-qt \
        --without-java \
        --without-imagemagick \
        --enable-codes=qrcode \
        --disable-static \
        --enable-shared || fail "Could not configure $pkgname. Please make sure you have a C compiler installed and try again."
fi

# Build the package
make -j$WORKER_COUNT || fail "Could not build $pkgname"

# Install the package
sudo make install || fail "Could not install $pkgname"

# Identify the built library (use an example, like libzbar.so or libzbar.a)
libname="libzbar.so"  # Adjust this based on your actual build output, could be .a, .so, or .dll

# Check if the library exists
lib_path="$here/$pkgname/dist/lib/$libname"
if [ ! -f "$lib_path" ]; then
    fail "Library file $libname not found in $lib_path. Build may have failed."
fi

# Strip the binary for size
host_strip "$lib_path" || fail "Could not strip $libname"

# Copy the binary to the electronlambda folder
cp -fpv "$lib_path" "$here/../electronlambda/." || fail "Could not copy $pkgname binary to its destination"

# Notify user of the successful installation
info "$libname has been placed in the 'electronlambda' folder."

# Return to the original directory
popd
